<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Curry-jian</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-04T13:43:09.330Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>li jian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flask-SQLAlchemy-DateBase</title>
    <link href="http://yoursite.com/2020/02/04/Flask-SQLAlchemy-DateBase/"/>
    <id>http://yoursite.com/2020/02/04/Flask-SQLAlchemy-DateBase/</id>
    <published>2020-02-04T07:21:13.000Z</published>
    <updated>2020-02-04T13:43:09.330Z</updated>
    
    <content type="html"><![CDATA[<p>1.MySQL-python中间件的介绍和安装<br>     * 在mac上可以直接输入  ‘sudo pip install mysql-python’进行安装<br>     * 在window下需要到’<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python3&#39;" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python3&#39;</a><br>      这个网址下载对应的python版本的中间件<br>          对应的命令： pip install mysqlclient-1.4.6-cp38-cp38-win_amd64.whl<br>     * 注意：如果与python的版本不符合就会出现报错的现象</p><p>2.ORM与Flask-SQLALchemy的安装和介绍<br>    * ORM: Objct Relationship Mapping (模型关系映射)<br>    * flask-aqlalchemy是一套ORM框架<br>    * ORM的好处：可以不适用sql语句进行对数据的修改 ，可以直接使用类的语句就好.一个表<br>        就是一个类，一条数据就是一个对象<br>    * 安装Flask-SQLALchemy： pip install flask-sqlalchemy</p><pre><code>例子： class Ariticle(Moble):        id = int()        title = String()        content = Text()       #实例化           article = Article(id = 1,title = &apos;aaa&apos;,content = &apos;bbb&apos;)       #加入表格或者说类中            add(article)       #修改数据内容             article.title = &apos;ccc&apos;             update(article)       #删除内容             delete(article)</code></pre><p>3.SQLALchemy连接数据库<br>    SQLALchemy :SQLAlchemy采用简单的Python语言，为高效和高性能的数据库访问设计<br>                是访问和操作数据库的开源脚本<br>    * 在实际操作过程中遇到的问题：<br>        * 在Mysql workbeath 中修改连接密码：右键出现Edit connections 进行点击 进入后点击store in Vault 就可以进行修改<br>        * 如何进入Mysql 命令行的形式：找到Mysql sever 下的bin目录 再就如命令行输入<br>            ./mysql -u root -p<br>        * 创建一个新的数据库 命令     creat datebase  数据库名  charset  utf8<br>    使用flask_sqlalchemy中的SQLALchemy进行初始化：</p><pre><code>    #调用函数    from flask_sqlalchemy import SQLAlchemy    app = Flask(__name__)    #初始化一个对象    db = SQLAlchemy(app)设置配置文件&apos;config.py&apos;文件中添加一下配置    #dialect+driver://username:password@host:post/database    DIALECT = &apos;mysql&apos;    DRIVER = &quot;mysqldb&quot;    USERNAME = &apos;root&apos;    PASSWORD = &apos;root&apos;    HOST = &apos;127.0.0.1&apos;    PORT = &apos;3306&apos;    DATABASE = &apos;db_demo1&apos;    SQLALCHEMY_DATABASE_URI = &quot;{}+{}://{}:{}@{}:{}/{}?charset=utf8&quot;.format(DIALECT,                                                   DRIVER,USERNAME,                                                   PASSWORD,HOST,PORT,                                                   DATABASE)    #去除警告信息    SQLALCHEMY_TRACK_MODIFICATIONS = False</code></pre><p>   在app文件中，添加配置文件，并且进行测试<br>           from flask import Flask<br>        #调用函数<br>        from flask_sqlalchemy import SQLAlchemy<br>        #引入config文件<br>        import config<br>        app = Flask(<strong>name</strong>)<br>        #重点（不明白）<br>        app.config.from_object(config)<br>        #初始化一个对象<br>        db = SQLAlchemy(app)<br>        #进行测试<br>        db.create_all()</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.MySQL-python中间件的介绍和安装&lt;br&gt;     * 在mac上可以直接输入  ‘sudo pip install mysql-python’进行安装&lt;br&gt;     * 在window下需要到’&lt;a href=&quot;https://www.lfd.uci.edu
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Flask--Jinja模板</title>
    <link href="http://yoursite.com/2020/02/03/Flask-jinja%E6%A8%A1%E6%9D%BF/"/>
    <id>http://yoursite.com/2020/02/03/Flask-jinja%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-02-03T12:23:41.000Z</published>
    <updated>2020-02-04T07:12:52.355Z</updated>
    
    <content type="html"><![CDATA[<pre><code>1.如何渲染Jinja2模板和传参：(主要是 &apos;render_template&apos;函数)* 渲染模板：    * 模板放在 templates 文件夹下面    * 从 flask 中导入 render_template 函数    * 在视图函数中，使用 render_template    #注意：在templates文件夹下面没有其他文件夹的话可以直接render_template(文件名)* 模板传参数：    * 如果只有一个或则少量参数的时候，可以直接在render_template函数中添加关键字就好         #   return render_template(&apos;index.html&apos;,&apos;user&apos; = &apos;username&apos;)    * 如果有多个参数的时候就需要把参数放入一个字典中，然后在&apos;render_template&apos;中使用**    把字典中的参数传递    &apos;&apos;&apos;            @app.route(&apos;/&apos;)            def index():                context = {                    &apos;username&apos;:&apos;李坚&apos;,                    &apos;gender&apos;:&apos;男&apos;,                    &apos;age&apos;: 18                }                return render_template(&apos;index.html&apos;,**context)    &apos;&apos;&apos;* 在模板中，如果需要使用变量，语法是&apos;{{params}}&apos;                &lt;p&gt;用户名：&apos;{{ username }}&apos;&lt;/p&gt;        * 在访问类的属性或则是字典或则是列表的时候，可以通过&apos;{{params.proper}}&apos;的形式，或则是&apos;{{params[]}}&apos;                   &lt;p&gt;名字：{{ person.name }}&lt;/p&gt;模板的渲染和传参的实例：    from flask import Flask,render_template    app = Flask(__name__)    @app.route(&apos;/&apos;)    def index():        context = {            &apos;username&apos;:&apos;李坚&apos;,            &apos;gender&apos;:&apos;男&apos;,            &apos;age&apos;: 18        }        return render_template(&apos;index.html&apos;,**context)    if __name__ == &apos;__main__&apos;:        app.run(debug= True)Jinja模板：        &lt;!DOCTYPE html&gt;    &lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;Title&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        这是HTML文件中的文字        &lt;p&gt;用户名：{{ username }}&lt;/p&gt;        &lt;p&gt;用户名：{{ age}} &lt;/p&gt;        &lt;p&gt;用户名：{{ gender }}&lt;/p&gt;    &lt;/body&gt;    &lt;/html&gt;模板的渲染和传参的实例：（含有类的例子）    from flask import Flask,render_template    app = Flask(__name__)    @app.route(&apos;/&apos;)    def index():        class Preson(object):            name = &apos;李坚&apos;            age = 20        p = Preson()        context = {            &apos;username&apos;:&apos;李坚&apos;,            &apos;gender&apos;:&apos;男&apos;,            &apos;age&apos;: 18,            &apos;person&apos;: p        }        return render_template(&apos;index.html&apos;,**context)    if __name__ == &apos;__main__&apos;:        app.run(debug= True)Jinja模板：        &lt;!DOCTYPE html&gt;    &lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;Title&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        这是HTML文件中的文字        &lt;p&gt;用户名：{{ username }}&lt;/p&gt;        &lt;p&gt;用户名：{{ age}} &lt;/p&gt;        &lt;p&gt;用户名：{{ gender }}&lt;/p&gt;        &lt;hr&gt;        &lt;p&gt;名字：{{ person.name }}&lt;/p&gt;        &lt;p&gt;年您：{{ person.age }}&lt;/p&gt;        &lt;/hr&gt;    &lt;/body&gt;    &lt;/html&gt;2.if判断语句* 语法格式：（Jinja模板中）    {% if xxx %}{% else %}{% endif %}if判断语句的具体实例（根据id的不同显示不同的页面）from flask import Flask,render_templateapp = Flask(__name__)@app.route(&apos;/&lt;id&gt;/&apos;)def index(id):    if id == &apos;1&apos;:        user = {            &apos;username&apos;:&apos;李坚&apos;,            &apos;age&apos; : 10        }    return render_template(&apos;index2.html&apos;,user=user)if __name__ == &apos;__main__&apos;:    app.run(debug= True)&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    {% if user %}        <a href="#">{{ user.username }}</a>        <a href="#">注销</a>    {% else %}        <a href="#">登陆</a>        <a href="#">注册</a>    {% endif %}&lt;/body&gt;&lt;/html&gt;3.for循环遍历列表和字典：* 字典的遍历和语法与&apos;python&apos;一样，可以使用&apos;item()&apos; &apos;keys()&apos; &apos;values()&apos;等函数    {% for k,v in user.item() %}<p>{{ k }}:{{ v }}</p>{% endfor %}* 列表的遍历：    {% for webisit in webisits %}<p>{{ webisit }}</p>{% endfor %}for循环的案例：（四大名著的表格排序）from flask import Flask,render_templateapp = Flask(__name__)@app.route(&apos;/&apos;)def index():    books=[        {            &apos;name&apos;:&apos;西游记&apos;,            &apos;author&apos;:&apos;吴承恩&apos;,            &apos;price&apos;:&apos;100&apos;        },        {            &apos;name&apos;:&apos;红楼梦&apos;,            &apos;author&apos;:&apos;曹雪芹&apos;,            &apos;price&apos;:&apos;50&apos;        },        {            &apos;name&apos;:&apos;三国演义&apos;,            &apos;author&apos;:&apos;罗贯中&apos;,            &apos;price&apos;:&apos;150&apos;        },        {            &quot;name&quot;:&apos;水浒传&apos;,            &quot;author&quot;:&apos;施耐庵&apos;,            &quot;price&quot;:200        }    ]    return render_template(&apos;index2.html&apos;,books=books)if __name__ == &apos;__main__&apos;:    app.run(debug= True)Jinja模板&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;table&gt;        &lt;thead&gt;            &lt;th&gt;书名&lt;/th&gt;            &lt;th&gt;作者&lt;/th&gt;            &lt;th&gt;价格&lt;/th&gt;        &lt;/thead&gt;        &lt;tbody&gt;        {% for book in books %}            <tr>                <td>{{book.name}}</td>                <td>{{book.author}}</td>                <td>{{book.price}}</td>            </tr>        {% endfor %}        &lt;/tbody&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;4.过滤器：    * 介绍：过滤器可以处理变量，把原始的变量经过处理后再展示出来（就是设置一个默认的，然后再用户没有设置的时候就可以直接过滤 输出默认的值）* 语法：     {{ avater(用户输入的值的名字) | default（过滤器）('xxx')}}* default（过滤器）:如果当前变量不存在的时候，这个时候就可以指定默认值* length: 求列表或则字符串或则字典 元组的长度过滤器的例子：（将图片的参数进行传递 ）    from flask import Flask,render_templateapp = Flask(__name__)@app.route(&apos;/&apos;)def index():    return render_template(&apos;index2.html&apos;,family=&apos;https://avatars2.githubusercontent.com/u/60211293?s=40&amp;v=4&apos;)if __name__ == &apos;__main__&apos;:    app.run(debug= True)Jinja模板：&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&quot;{{ family|default('https://avatars0.githubusercontent.com/u/472721?v=4')}}&quot; alt=&quot;&quot;&gt;&lt;/body&gt;&lt;/html&gt;过滤器的例子：（关于评论的显示 ）Jinja模板：    &lt;!DOCTYPE html&gt;    &lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;Title&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;img src=&quot;{{ family|default('https://avatars0.githubusercontent.com/u/472721?v=4')}}&quot; alt=&quot;&quot;&gt;    &lt;hr&gt;    &lt;p&gt;评论数:({{comments|length}})&lt;/p&gt;    &lt;ul&gt;        {% for comment in comments %}        <li>            <a href="#">{{comment.user}}</a>            <p>{{ comment.content }}</p>        </li>    {% endfor %}    &lt;/ul&gt;    &lt;/body&gt;    &lt;/html&gt;python文件：from flask import Flask,render_templateapp = Flask(__name__)@app.route(&apos;/&apos;)def index():    comments = [        {            &apos;user&apos;: &apos;李建安&apos;,            &apos;content&apos;:&apos;xxx&apos;        },        {            &apos;user&apos;: &apos;李坚&apos;,            &apos;content&apos;:&apos;xxx&apos;        }    ]    return render_template(&apos;index2.html&apos;,comments=comments)if __name__ == &apos;__main__&apos;:    app.run(debug= True)5.继承和block块* 作用：可以把一些公共的代码放在父模板中（base.HTML）文件* 语法：#    {% extend 'base.html'%}block 实现：    * 作用：可以让子模版实现自己的需求，父模板需要提前定义好    * 注意：子模板中的代码必须放在block块中，不然没有效果    具体的block语法例子：{% block 模块名 %}{% endblock %}继承和block的具体实例：py文件：from flask import Flask,render_templateapp = Flask(__name__)@app.route('/')def index():    return render_template('index.html')@app.route('/login/')def login():    return render_template('login.html')if __name__ == '__main__':    app.run(debug= True) base.html 文件： <!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>{% block title %}{% endblock %}&lt;/title&gt;                &lt;style&gt;                .nav{                    background: #3a3a3a;                    height: 65px;                }                ul{                    overflow: hidden;                }                ul li{                    float: left;                    list-style: none;                    padding: 0 10px;                    line-height: 65px;                }                ul li a{                    color: white;                }            &lt;/style&gt;        &lt;/head&gt;        &lt;body&gt;            &lt;div class=&quot;nav&quot;&gt;            &lt;ul&gt;                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;发布问答&lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;        {% block main %}{% endblock %}</body></html>login.html:{% extends 'base.html' %}{% block title %}    登陆页面{% endblock %}        {% block main %}    <p>这是登陆页面</p>{% endblock %}    index.html:        {% extends 'base.html' %}        {% block title %}    首页{% endblock %}        {% block main %}    <p>这是首页面</p>{% endblock %}6.URL链接和加载静态文件    * 加载静态文件语法：&apos;url_for(&apos;static&apos;，filename=&apos;路径&apos;)&apos;    * 静态文件 flask会在static文件夹中开始寻找，所有不需要再写static这个路径    * 可以加载css文件，js文件 image文件    image文件：    &lt;img src=&quot;{{ url_for('static',filename='images/lijian.jpg') }}&quot; alt=&quot;&quot;&gt;    js文件：     &lt;script src=&quot;{{ url_for('static',filename='js/index.js') }}&quot;&gt;&lt;/script&gt;    css文件：    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static',filename='css/index.css') }}&quot;&gt;*url链接：使用url_for(视图函数名)，从而反转url 跳转页面        &lt;a href=&quot;{{ url_for('login') }}&quot;&gt;登陆&lt;/a&gt;url链接和加载静态文件的例子：    Py文件：        from flask import Flask,render_template        app = Flask(__name__)        @app.route(&apos;/&apos;)        def index():            return render_template(&apos;index.html&apos;)        @app.route(&apos;/login/&apos;)        def login():            return render_template(&apos;login.html&apos;)        if __name__ == &apos;__main__&apos;:            app.run(debug=True)    index.html文件：        &lt;!DOCTYPE html&gt;        &lt;html lang=&quot;en&quot;&gt;        &lt;head&gt;            &lt;meta charset=&quot;UTF-8&quot;&gt;            &lt;title&gt;Title&lt;/title&gt;            &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static',filename='css/index.css') }}&quot;&gt;            &lt;script src=&quot;{{ url_for('static',filename='js/index.js') }}&quot;&gt;&lt;/script&gt;        &lt;/head&gt;        &lt;body&gt;        &lt;a href=&quot;{{ url_for('login') }}&quot;&gt;登陆&lt;/a&gt;        &lt;img src=&quot;{{ url_for('static',filename='images/lijian.jpg') }}&quot; alt=&quot;&quot;&gt;        &lt;/body&gt;        &lt;/html&gt;    index.js文件：        /**         * Created by 栩森 on 2020/2/4.         */        alert(&apos;我是李坚&apos;)    index.css文件：           a{                background: red;            }    login.html 文件：        &lt;!DOCTYPE html&gt;        &lt;html lang=&quot;en&quot;&gt;        &lt;head&gt;            &lt;meta charset=&quot;UTF-8&quot;&gt;            &lt;title&gt;Title&lt;/title&gt;        &lt;/head&gt;        &lt;body&gt;            &lt;h1&gt;这是登陆页面&lt;/h1&gt;        &lt;/body&gt;        &lt;/html&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;1.如何渲染Jinja2模板和传参：(主要是 &amp;apos;render_template&amp;apos;函数)

* 渲染模板：
    * 模板放在 templates 文件夹下面
    * 从 flask 中导入 render_template 函数
  
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Flask--urls和视图</title>
    <link href="http://yoursite.com/2020/02/02/Flask--urls%E5%92%8C%E8%A7%86%E5%9B%BE/"/>
    <id>http://yoursite.com/2020/02/02/Flask--urls%E5%92%8C%E8%A7%86%E5%9B%BE/</id>
    <published>2020-02-02T09:32:35.000Z</published>
    <updated>2020-02-03T12:21:47.286Z</updated>
    
    <content type="html"><![CDATA[<pre><code>1.对代码的解析：#encoding UTF-8#模块的导入from flask import Flask#初始化一个Flask对象#Flask()#需要传递一个参数__name__#1. 方便flask框架去寻找资源#2. 方便flask插件 比如Flask-Sqlalchemy出现错误的时候，去寻找问题所在的位置app = Flask(__name__)# @app.route是一个装饰器# @开头，并且在函数的上面，说明是一个装饰器# 这个装饰器的作用，是做一个URL与视图函数的映射# 127.0.0.1:5000/  去请求hello_woeld 这个函数  然后将结果返回到浏览器@app.route(&apos;/&apos;)def hello_world():    return &apos;我是第一个程序&apos;# 如果当前这个文件是作为入口程序进行运行， 那么就执行app.run()if __name__ == &apos;__main__&apos;:    #app.run()    #启动一个应用服务器  来接受用户的请求    #while True    #   listen()    #设置debug模式  将错误直接显示到网页上面    app.run(debug= True)2.设置debug模式    a.在app.run()中传入一个关键字参数debug,例如：run(debug = Ture)，就设置当前项目为debug模式。    b.debug模式的两大功能：        * 当程序出现问题的时候，可以在页面中看到错误的信息和出错的位置        * 只要修改项目中的python文件，程序就会自动的加载，不需要手动的重新启动服务器。      具体的案例如下：          from flask import Flask        app = Flask(__name__)        @app.route(&apos;/&apos;)        def hello_world():            return &apos;我是第一个程序&apos;        if __name__ == &apos;__main__&apos;:            #设置debug模式  将错误直接显示到网页上面            app.run(debug= True)3.使用配置文件    * 新建一个&apos;config.py&apos;文件    * 在主要的app文件中导入这个文件，并且配置到app文件中        &apos;&apos;&apos;        import config        app.config.from_object(config)        &apos;&apos;&apos;    * 还有许多的其他参数也可以放置在文件中，比如&apos;SECRET_KEY&apos; 和 &apos;SQLALCHEMY&apos;这些配置文件    主app文件实例如下：（其实主要的作用还是和debug模式一样的作用）        from flask import Flask        #导入config文件        import config        app = Flask(__name__)        #加入config文件的配置        app.config.from_object(config)        @app.route(&apos;/&apos;)        def hello_world():            return &apos;我是第一个程序&apos;        if __name__ == &apos;__main__&apos;:            app.run()    config文件的配置：（可以加入很多的参数 注意的是需要将文件导入和对文件配置的导入使用）        DEBUG = True4.url传递参数    * 参数的作用： 可以在相同的URL，当时不指定相同的参数，来加载不同的数据。                例如：http://127.0.0.1:5000/URL/参数            * 在flask中如何使用参数：        &apos;&apos;&apos;            @app.route(&apos;/article/&lt;id&gt;&apos;)            def article(id):                return &apos;您请求的参数是 ： %S&apos; % id        &apos;&apos;&apos;           注意：参数必须放在&lt;&gt;中                    视图函数中需要放在和URL中的id相同的参数（就是函数括号里面的参数必须与id相同）    url传递参数的例子：            from flask import Flask            app = Flask(__name__)            #视图函数            @app.route(&apos;/login/&lt;id&gt;&apos;)            def login(id):                return &quot;您请求的参数是 % S&quot; % id            if __name__ == &apos;__main__&apos;:                app.run(debug=True)5.URL反转（需要一个模板：url_for）    * 什么叫做反转URL： 从视图函数到url的转换叫做反转URL      （根据视图的函数名字 可以直接切换到URL的参数）    * 反转URL的用处：        * 在页面重定向的时候，会使用url反转        * 在模板中，也会使用url反转    Url反转例子：            from flask import Flask,url_for            app = Flask(__name__)            @app.route(&apos;/&apos;)            def index():                print(url_for(&apos;my_list&apos;))                print(url_for(&apos;question&apos;),id = &quot;aaaa&quot;)                return &apos;这是首页&apos;            @app.route(&apos;/list/&apos;)            def my_list():                return &quot;这是登陆页面&quot;            @app.route(&apos;/question/&lt;id&gt;&apos;)            def question(id):                return &apos;这是发布问答的页面:%S&apos; % id            if __name__ == &apos;__main__&apos;:                app.run(debug= True)6.重定向和页面跳转：(需要两个模板： redirect  url_for)    * 用处： 在用户访问一些需要登陆的页面的时候，如果用户没有登陆用户则会跳转到用户的登陆界面    * 代码的实现：        &apos;&apos;&apos;            from flask import redirect,url_for            redirect(url_for(&apos;login&apos;))        &apos;&apos;&apos;    重定向和页面跳转的代码演示：        from flask import Flask,redirect,url_for        app = Flask(__name__)            @app.route(&apos;/&apos;)            def index():                   question_url = url_for(&apos;question&apos;,id = 1)                   return redirect(question_url)                   return &apos;这是首页&apos;            @app.route(&apos;/login/&apos;)            def login():                return &quot;这是登陆页面&quot;            @app.route(&apos;/question/&lt;id&gt;&apos;)            # 关键点   条件性代码            def question(id):                if id==&quot;1&quot;:                    return &apos;这是发布问答的页面&apos;                else:                    return redirect(url_for(&quot;login&quot;))            if __name__ == &apos;__main__&apos;:                app.run(debug=True)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;1.对代码的解析：
#encoding UTF-8
#模块的导入
from flask import Flask
#初始化一个Flask对象
#Flask()
#需要传递一个参数__name__
#1. 方便flask框架去寻找资源
#2. 方便flask插
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hexo的基本操作</title>
    <link href="http://yoursite.com/2020/01/24/hexo%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/01/24/hexo%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2020-01-24T05:11:04.000Z</published>
    <updated>2020-02-04T05:28:06.746Z</updated>
    
    <content type="html"><![CDATA[<p>1.创建一个新的文件：<br>                hexo new post 文件名<br>                hexo new [layout(布局)] -p 路径 文件名</p><p>2.上传到网页并且进行部署（同时出现在GitHub上面）:<br>                hexo d -g</p><p>3.注意：在文档中有渲染的语法，或则有重定向的语法就会报错<br>        Template render error<br>        则需要进行注释或者标注</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.创建一个新的文件：&lt;br&gt;                hexo new post 文件名&lt;br&gt;                hexo new [layout(布局)] -p 路径 文件名&lt;/p&gt;
&lt;p&gt;2.上传到网页并且进行部署（同时出现在GitHub上面）:&lt;
      
    
    </summary>
    
    
    
      <category term="Li jian" scheme="http://yoursite.com/tags/Li-jian/"/>
    
  </entry>
  
</feed>
